AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 Assignment 6
Transform: AWS::Serverless-2016-10-31

Parameters: 
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"

  DbSubnetIpBlocks: 
    Description: "Comma-delimited list of three CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.0.0/24, 10.0.1.0/24, 10.0.2.0/24"

  PrivateSubnetCIDRBlocks: 
    Description: "Comma-delimited list of three CIDR blocks for Private Subnets"
    Type: CommaDelimitedList
    Default: "10.0.30.0/24, 10.0.40.0/24, 10.0.50.0/24"

  DestinationPublicRouteCidrBlock:   
    Description: "Destination CIDR block for Public Route"
    Type: String
    Default: "0.0.0.0/0"

  SecurityGroupCidrBlock:   
    Description: "CIDR block for Security Group"
    Type: String
    Default: "0.0.0.0/0"
  
  ImageId:
    Description: "AMI ID for creating EC2 Instance"
    Type: String
    Default: ""

  HTTPPort:
    Description: "HTTP Port"
    Type: String
    Default: "80"

  HTTPSPort:
    Description: "HTTPS Port"
    Type: String
    Default: "443"

  SshPort:
    Description: "SSH Port"
    Type: String
    Default: "22"

  WebAppPort:
    Description: "Port for running the web application"
    Type: String
    Default: "8080"

  VolumeType:
    Description: "Volume Type"
    Type: String
    Default: "gp2"

  VolumeSize:
    Description: "Volume Size"
    Type: String
    Default: "20"

  DeleteOnTermination:
    Description: "Delete on Termination"
    Type: String
    Default: "true"

  RDSPort:
    Description: "TCP Port"
    Type: String
    Default: "5432"

  S3BucketName:
    Type: String
    Description: Bucket Name
    # Default: "ja6kly2x9k.dev.shreyaghate.me"
    Default: "gDI93fzreJ.prod.shreyaghate.me"

  S3BucketRegion:
    Type: String
    Description: "Bucket Region"
    Default: "us-east-1"

  DBMasterUsername:
    Description: 'The master user name for the DB instance'
    Type: String
    Default: 'csye6225'

  DBName:
    Description: 'The name for the DB instance'
    Type: String
    Default: 'csye6225'

  DBMasterUserPassword:
    Description: 'The master password for the DB instance'
    Type: String
    NoEcho: true
    Default: 'shreyardspassword'

  RDSParameterGroupFamily:
    Description: "Database Family Group"
    Type: String
    Default: "postgres13"

  DBEngineVersion:
    Description: 'PostgreSQL version.'
    Type: String
    Default: '13.3'
    AllowedValues: ['10.1', '10.3', '10.4', '10.5', '10.6', '10.7', '10.9', '10.10', '10.11', '10.12', '10.13', '10.14', '11.1', '11.2', '11.4', '11.5', '11.6', '11.7', '11.8', '11.9', '12.2', '12.3', '12.4', '12.7', '12.8', '12.9', '13.3']

  MyDomainName:
    Description: "Domain Name"
    Type: String
    Default: "prod.shreyaghate.me."

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: myVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: myVPC Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref DbSubnetIpBlocks]
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: myVPC Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref DbSubnetIpBlocks]
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: myVPC Public Subnet 2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref DbSubnetIpBlocks]
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: myVPC Public Subnet 3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Select [0, !Ref PrivateSubnetCIDRBlocks]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myVPC Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [1, !Ref PrivateSubnetCIDRBlocks]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myVPC Private Subnet 2
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Select [2, !Ref PrivateSubnetCIDRBlocks]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myVPC Private Subnet 3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: myVPC Public Route Table
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: myVPC Private Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 
    - InternetGateway
    - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationPublicRouteCidrBlock
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  DBPrivateSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: 'DB Subnet Group'
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
        - 
          Key: Name
          Value: myVPC DB Subnet Group

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "RDS PostgreSQL Access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref RDSPort
          ToPort: !Ref RDSPort
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP and HTTPS connections 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: HTTP IPv4
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
          CidrIp: !Ref SecurityGroupCidrBlock
        - Description: HTTPS IPv4
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          # SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
          CidrIp: !Ref SecurityGroupCidrBlock

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Service
      GroupName: web     
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SshPort
          ToPort: !Ref SshPort
          # CidrIp: !Ref SecurityGroupCidrBlock
        - IpProtocol: tcp
          FromPort: !Ref WebAppPort
          ToPort: !Ref WebAppPort
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: myVPC EC2 Security Group

  asgLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: 'asg_launch_config'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref ApplicationSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: !Ref VolumeType
              VolumeSize: !Ref VolumeSize
              DeleteOnTermination: !Ref DeleteOnTermination
        ImageId: !Ref ImageId
        InstanceType: t2.micro
        IamInstanceProfile: 
            Name: !Ref IAMInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            cat > /etc/environment << 'EOF'
              export DB_CONNECTION=${RDSDatabaseInstance.Endpoint.Address}
              export DB_USERNAME=${DBMasterUsername}
              export DB_PASSWORD=${DBMasterUserPassword}
              export DB_NAME=${DBName}
              export S3_BUCKET_NAME=${S3BucketName}
              export AWS_BUCKET_REGION=${S3BucketRegion}

            EOF
            source /etc/profile
            cd /home/ec2-user/webservice
            rm -rf node_modules
            sudo npm i
            sudo systemctl enable myapp
            sudo systemctl start myapp
            sudo pm2 reload all --update-env

  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      TargetGroupARNs:
      - !Ref TargetGroup

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
    - AttachGateway
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  asgScalingUpPolicy: 
      Type: AWS::AutoScaling::ScalingPolicy
      Properties: 
        AdjustmentType: "ChangeInCapacity"
        Cooldown: "60"
        AutoScalingGroupName: !Ref asgWebApp
        ScalingAdjustment: 1

  asgScalingDownPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      Cooldown: "60"
      AutoScalingGroupName: !Ref asgWebApp
      ScalingAdjustment: -1

  CPUAlarmHigh: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
        AlarmDescription: Scale-up if CPU > 5%
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: '60'
        EvaluationPeriods: '2'
        Threshold: "5"
        AlarmActions: 
        - !Ref asgScalingUpPolicy
        Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
        ComparisonOperator: "GreaterThanThreshold"

  CPUAlarmLow: 
     Type: AWS::CloudWatch::Alarm
     Properties: 
        AlarmDescription: Scale-down if CPU < 3%
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: '60'
        EvaluationPeriods: '2'
        Threshold: "3"
        AlarmActions: 
        - !Ref asgScalingDownPolicy
        Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
        ComparisonOperator: "LessThanThreshold"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 60
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: CloudFormation Sample PostgreSQL Parameter Group
      Family: !Ref RDSParameterGroupFamily
      Tags:
      - Key: Name
        Value: myVPC RDS Instance

  RDSDatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: "Delete"
    Properties:
      DBInstanceIdentifier: 'csye6225'
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      MultiAZ: 'false'
      DBParameterGroupName:
        Ref: RDSParameterGroup  
      DBSubnetGroupName: !Ref DBPrivateSubnetGroup   
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      DBName: 'csye6225'
      PubliclyAccessible: false 
      Port: !Ref RDSPort
      VPCSecurityGroups: 
        - !GetAtt DatabaseSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: myVPC RDS Instance

  WebAppS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            Resource: !Join ['', [!GetAtt 'S3Bucket.Arn','/*' ]]
      Roles:
      - !Ref CodeDeployEC2ServiceRole

  GHUploadToS3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GHUploadToS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            Resource: !Join ['', [!GetAtt 'S3Bucket.Arn','/*' ]]
      # Roles:
      # - !Ref CodeDeployEC2ServiceRole
      Users: 
      - ghactions-app
  
  GHCodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GHCodeDeploy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - codedeploy:RegisterApplicationRevision
            - codedeploy:GetApplicationRevision
            Resource: 
            - "arn:aws:codedeploy:us-east-1:282741675015:application:csye6225-webapp"
          - Effect: Allow
            Action:
            - codedeploy:GetDeploymentConfig
            Resource: "*"
          - Effect: Allow
            Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetDeployment
            Resource: 
            - arn:aws:codedeploy:us-east-1:282741675015:deploymentconfig:CodeDeployDefault.OneAtATime
            - arn:aws:codedeploy:us-east-1:282741675015:deploymentconfig:CodeDeployDefault.HalfAtATime
            - arn:aws:codedeploy:us-east-1:282741675015:deploymentconfig:CodeDeployDefault.AllAtOnce
      # Roles:
      # - !Ref CodeDeployEC2ServiceRole
      Users: 
      - ghactions-app
  
  GHEC2AMI:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GHEC2AMI
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - ec2:CreateSnapshot
            - ec2:CreateTags
            - ec2:CreateVolume
            - ec2:DeleteKeyPair
            - ec2:DeleteSecurityGroup
            - ec2:DeleteSnapshot
            - ec2:DeleteVolume
            - ec2:DeregisterImage
            - ec2:DescribeImageAttribute
            - ec2:DescribeImages
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - ec2:DescribeRegions
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSnapshots
            - ec2:DescribeSubnets
            - ec2:DescribeTags
            - ec2:DescribeVolumes
            - ec2:DetachVolume
            - ec2:GetPasswordData
            - ec2:ModifyImageAttribute
            - ec2:ModifyInstanceAttribute
            - ec2:ModifySnapshotAttribute
            - ec2:RegisterImage
            - ec2:RunInstances
            - ec2:StopInstances
            - ec2:TerminateInstances
            Resource: "*"
      Roles:
      - !Ref CodeDeployEC2ServiceRole
      Users: 
      - ghactions-app
    
  WebAppS3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      Description: IAM Role for Web App and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListBucketContents
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join ['', [!GetAtt 'S3Bucket.Arn']]
      Path: /
      # Users: 
      # - ghactions-app

  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      Description: IAM Role for EC2 instances to call web application
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeDeployEC2S3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:DeleteObject'
                - 's3:Get*'
                - 's3:List*'
                Resource: 
                - arn:aws:s3:::codedeploy.shreyaghate.me/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: 
                - !Join ['', [!GetAtt 'S3Bucket.Arn']]
                - arn:aws:s3:::codedeploy.shreyaghate.me/*
                # - arn:aws:s3:::aws-codedeploy-us-east-1/*
        # - PolicyName: "CloudWatchAgentServerPolicy"
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - 'cloudwatch:PutMetricData'
        #           - 'ec2:DescribeVolumes'
        #           - 'ec2:DescribeTags'
        #           - 'logs:PutLogEvents'
        #           - 'logs:DescribeLogStreams'
        #           - 'logs:DescribeLogGroups'
        #           - 'logs:CreateLogStream'
        #           - 'logs:CreateLogGroup'
        #         Resource: "*"
        #       - Effect: Allow
        #         Action:
        #           - 'ssm:GetParameter'
        #           - 'ssm:PutParameter'
        #         Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      Description: IAM Role for Code Deploy to access AWS services as Autoscaling group
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: /


  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: IAMInstanceProfile
      Path: "/"
      Roles:
      - !Ref CodeDeployEC2ServiceRole

  applicationDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref MyDomainName
      RecordSets:
      - Name: !Ref MyDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt loadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt loadBalancer.DNSName

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: 'csye6225-webapp'
      # ComputePlatform: 'EC2/On-premises'
      ComputePlatform: 'Server'

  
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - asgWebApp
    Properties: 
      ApplicationName: 'csye6225-webapp'
      DeploymentGroupName: 'csye6225-webapp-deployment'
      # ServiceRoleArn: 'arn:aws:iam::282741675015:role/CodeDeployServiceRole'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoScalingGroups:
      - !Sub ${AWS::StackName}-asg
      DeploymentStyle: 
          DeploymentType: 'IN_PLACE'
          DeploymentOption: 'WITHOUT_TRAFFIC_CONTROL'
      Ec2TagSet:
        Ec2TagSetList:
        - Ec2TagGroup:
          - Key: Application
            Value: WebApp
            Type: KEY_AND_VALUE    
      # Ec2TagFilters:
      #   - Key: 'Name'
      #     Value: 'Deployment Group'
      #     Type: KEY_AND_VALUE
      DeploymentConfigName: 'CodeDeployDefault.AllAtOnce'
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'assignment-sns-topic'
      TopicName: 'assignment-sns-topic'
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LambdaFunction.Arn
  
  # LambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: '/Users/shreya.ghate/Desktop/serverless/handler.zip'
  #     Handler: "handler.SesSendEmail"
  #     Runtime: nodejs14.0
  #     FunctionName: mylambda
  #     Description: mylambda 
  #     MemorySize: 512
  #     Timeout: 60
  #     # Role: !Ref LambdaExecutionRoleArn
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: '/Users/shreya.ghate/Desktop/serverless/handler.zip'
      Handler: "handler.SesSendEmail"
      Runtime: nodejs14.x
      FunctionName: mylambda
      Description: mylambda 
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExpressFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: '$LATEST'
      Name: live

  LambdaFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunction
      Principal: sns.amazonaws.com   
      SourceArn:  !Ref SNSTopic 

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: Lambdapolicy
        PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
            -   Effect: Allow
                Action: 
                -   ses:SendEmail
                -   ses:SendRawEmail
                -   sns:Publish
                -   "dynamodb:*"
                Resource: "*"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  SNSTopicPolicy:
    DependsOn: 
        - SNSTopic
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # - Effect: Allow
          #   Action: 'sns:Publish'
          #   Resource: !Ref SNSTopic
          #   Principal:
          #     AWS: '*'
          #   Condition:
          #     ArnLike:
          #       AWS:SourceArn: !Sub 'arn:aws:*:*:${AWS::AccountId}:*'
          - Sid: AllowServices
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - cloudwatch.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              - !Ref SNSTopic
          - Sid: AllowAWS
            Effect: Allow
            Principal:
              # AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              AWS: '*'
            Action: 'sns:Publish'
            Resource:
              - !Ref SNSTopic
      Topics:
        - !Ref SNSTopic
      # Roles:
      # - !Ref CodeDeployEC2ServiceRole

  Queue:
    Type: AWS::SQS::Queue
    Properties:
        QueueName: SQSService

  ServerLessApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
        ApplicationName: ServerLessApplication
        ComputePlatform:  Lambda 

  ServerLessApplicationDeploymentGroup:
    DependsOn: 
    - ServerLessApplication
    - LambdaCodeDeployServiceRole
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
        ApplicationName: !Ref ServerLessApplication
        DeploymentGroupName: ServerLessApplicationDeploymentGroup
        ServiceRoleArn: 
            !GetAtt LambdaCodeDeployServiceRole.Arn
        DeploymentStyle:
            DeploymentOption: WITH_TRAFFIC_CONTROL 
            DeploymentType: BLUE_GREEN 

  LambdaCodeDeployServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
        RoleName: LambdaCodeDeployServiceRole
        ManagedPolicyArns: 
        -   arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        AssumeRolePolicyDocument: 
            Version: '2012-10-17'
            Statement: 
            -   Effect: Allow
                Sid: ""
                Principal: 
                    Service: 
                    - codedeploy.amazonaws.com 
                    - lambda.amazonaws.com
                Action: 
                - 'sts:AssumeRole'

  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
        # BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions: 
        - AttributeName: Email
          AttributeType: S
        KeySchema:
        - AttributeName: Email
          KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: EmailAPI
        TimeToLiveSpecification:
            AttributeName: TimeToLive
            Enabled: true

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
  AZ1:
    Description: Availability Zone 1
    Value: !GetAtt 
      - PublicSubnet1
      - AvailabilityZone
  AZ2:
    Description: Availability Zone 2
    Value: !GetAtt 
      - PublicSubnet2
      - AvailabilityZone
  AZ3:
    Description: Availability Zone 3
    Value: !GetAtt 
      - PublicSubnet3
      - AvailabilityZone

  S3Bucket:
    Description: S3 Bucket
    Value: !Ref S3Bucket

