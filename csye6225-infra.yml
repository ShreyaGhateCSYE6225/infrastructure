AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a VPC for CSYE 6225 Assignment 3

Parameters: 
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"

  DbSubnetIpBlocks: 
    Description: "Comma-delimited list of three CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.0.0/24, 10.0.1.0/24, 10.0.2.0/24"

  PrivateSubnetCIDRBlocks: 
    Description: "Comma-delimited list of three CIDR blocks for Private Subnets"
    Type: CommaDelimitedList
    Default: "10.0.30.0/24, 10.0.40.0/24, 10.0.50.0/24"

  DestinationPublicRouteCidrBlock:   
    Description: "Destination CIDR block for Public Route"
    Type: String
    Default: "0.0.0.0/0"

  SecurityGroupCidrBlock:   
    Description: "CIDR block for Security Group"
    Type: String
    Default: "0.0.0.0/0"
  
  ImageId:
    Description: "AMI ID for creating EC2 Instance"
    Type: String
    Default: ""

  HTTPPort:
    Description: "HTTP Port"
    Type: String
    Default: "80"

  HTTPSPort:
    Description: "HTTPS Port"
    Type: String
    Default: "443"

  SshPort:
    Description: "SSH Port"
    Type: String
    Default: "22"

  WebAppPort:
    Description: "Port for running the web application"
    Type: String
    Default: "8080"

  VolumeType:
    Description: "Volume Type"
    Type: String
    Default: "gp2"

  VolumeSize:
    Description: "Volume Size"
    Type: String
    Default: "20"

  DeleteOnTermination:
    Description: "Delete on Termination"
    Type: String
    Default: "true"

  RDSPort:
    Description: "TCP Port"
    Type: String
    Default: "5432"

  S3BucketName:
    Type: String
    Description: Bucket Name
    Default: "ja6kly2x9k.dev.shreyaghate.me"
    # Default: "gDI93fzreJ.prod.shreyaghate.me"

  S3BucketRegion:
    Type: String
    Description: "Bucket Region"
    Default: "us-east-1"

  DBMasterUsername:
    Description: 'The master user name for the DB instance'
    Type: String
    Default: 'csye6225'

  DBName:
    Description: 'The name for the DB instance'
    Type: String
    Default: 'csye6225'

  DBMasterUserPassword:
    Description: 'The master password for the DB instance'
    Type: String
    NoEcho: true
    Default: 'shreyardspassword'

  RDSParameterGroupFamily:
    Description: "Database Family Group"
    Type: String
    Default: "postgres13"

  DBEngineVersion:
    Description: 'PostgreSQL version.'
    Type: String
    Default: '13.3'
    AllowedValues: ['10.1', '10.3', '10.4', '10.5', '10.6', '10.7', '10.9', '10.10', '10.11', '10.12', '10.13', '10.14', '11.1', '11.2', '11.4', '11.5', '11.6', '11.7', '11.8', '11.9', '12.2', '12.3', '12.4', '12.7', '12.8', '12.9', '13.3']

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: myVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: myVPC Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref DbSubnetIpBlocks]
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: myVPC Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref DbSubnetIpBlocks]
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: myVPC Public Subnet 2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref DbSubnetIpBlocks]
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: myVPC Public Subnet 3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Select [0, !Ref PrivateSubnetCIDRBlocks]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myVPC Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [1, !Ref PrivateSubnetCIDRBlocks]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myVPC Private Subnet 2
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Select [2, !Ref PrivateSubnetCIDRBlocks]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myVPC Private Subnet 3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: myVPC Public Route Table
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: myVPC Private Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 
    - InternetGateway
    - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationPublicRouteCidrBlock
      GatewayId: !Ref InternetGateway

  # PrivateRoute:
  #       Type: AWS::EC2::Route
  #       Properties:
  #         RouteTableId: !Ref PrivateRouteTable
  #         DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  DBPrivateSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: 'DB Subnet Group'
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
        - 
          Key: Name
          Value: myVPC DB Subnet Group

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Service
      GroupName: web     
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPPort
          ToPort: !Ref HTTPPort
          CidrIp: !Ref SecurityGroupCidrBlock
        - IpProtocol: tcp
          FromPort: !Ref SshPort
          ToPort: !Ref SshPort
          CidrIp: !Ref SecurityGroupCidrBlock
        - IpProtocol: tcp
          FromPort: !Ref HTTPSPort
          ToPort: !Ref HTTPSPort
          CidrIp: !Ref SecurityGroupCidrBlock
        - IpProtocol: tcp
          FromPort: !Ref WebAppPort
          ToPort: !Ref WebAppPort
          CidrIp: !Ref SecurityGroupCidrBlock
        - IpProtocol: tcp
          FromPort: !Ref RDSPort
          ToPort: !Ref RDSPort
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPPort
          ToPort: !Ref HTTPPort
          CidrIp: !Ref SecurityGroupCidrBlock
      Tags:
        - Key: Name
          Value: myVPC EC2 Security Group

  # DatabaseSecurityGroup: 
  #   Type: AWS::RDS::DBSecurityGroup
  #   Properties: 
  #     EC2VpcId: !Ref VPC
  #     DBSecurityGroupIngress:
  #       # CIDRIP: '10.0.0.0/16'
  #       # EC2SecurityGroupName: !Ref ApplicationSecurityGroup
  #       EC2SecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
  #     GroupDescription: "RDS PostgreSQL Access"

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "RDS PostgreSQL Access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref RDSPort
          ToPort: !Ref RDSPort
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
    - RDSDatabaseInstance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref IAMInstanceProfile
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
        - !Ref ApplicationSecurityGroup
        SubnetId: !Ref  PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: !Ref VolumeType
            VolumeSize: !Ref VolumeSize
            DeleteOnTermination: !Ref DeleteOnTermination
      Tags:
        - Key: Name
          Value: myVPC EC2 Instance
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash

            sudo chmod 777 /etc/profile.d/webapp.sh

            echo "export DB_CONNECTION=${RDSDatabaseInstance.Endpoint.Address}" >> /etc/profile.d/webapp.sh
            echo "export DB_USERNAME=${DBMasterUsername}" >> /etc/profile.d/webapp.sh 
            echo "export DB_PASSWORD=${DBMasterUserPassword}" >> /etc/profile.d/webapp.sh  
            echo "export DB_NAME=${DBName}" >> /etc/profile.d/webapp.sh  
            echo "export S3_BUCKET_NAME=${S3BucketName}" >> /etc/profile.d/webapp.sh 
            echo "export AWS_BUCKET_REGION=${S3BucketRegion}" >> /etc/profile.d/webapp.sh 

      # UserData: !Base64 
      #   'Fn::Sub': 
      #     - |-
      #       <script>
      #       export DB_CONNECTION="${RdsEndpoint}"
      #       </script>
      #     - { RdsEndpoint: !GetAtt Rds.Endpoint.Address }

      # UserData:
      #   Fn::Base64: 
      #     Fn::Sub: |
      #       #!/bin/bash
            
      #       cat > /etc/profile.d/webapp.sh << 'EOF'

      #       echo "export DB_HOSTNAME=${}" >> /etc/profile.d/webapp.sh
      #       echo "export DB_USERNAME=${}" >> /etc/profile.d/webapp.sh
      #       echo "export DB_PASSWORD=${}" >> /etc/profile.d/webapp.sh
      #       echo "export S3_BUCKET_NAME=${S3BucketName}" >> /etc/profile.d/webapp.sh

      #       EOF
  
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 60
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: CloudFormation Sample PostgreSQL Parameter Group
      Family: !Ref RDSParameterGroupFamily
      # Parameters: 
      #   # Key : Value
      Tags:
      - Key: Name
        Value: myVPC RDS Instance

  RDSDatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: 'csye6225'
      AllocatedStorage: "5"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      MultiAZ: 'false'
      DBParameterGroupName:
        Ref: RDSParameterGroup  
      DBSubnetGroupName: !Ref DBPrivateSubnetGroup   
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      DBName: 'csye6225'
      VPCSecurityGroups: 
        - !GetAtt DatabaseSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: myVPC RDS Instance
    # DeletionPolicy: Snapshot
    # UpdateReplacePolicy: Snapshot

  WebAppS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            Resource: !GetAtt 'S3Bucket.Arn'
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            Resource: !Join ['', [!GetAtt 'S3Bucket.Arn','/*' ]]
      Roles:
      - !Ref WebAppS3IAMRole

  WebAppS3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      Description: IAM Role for Web App and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: IAMInstanceProfile
      Path: "/"
      Roles:
      - !Ref WebAppS3IAMRole

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
  AZ1:
    Description: Availability Zone 1
    Value: !GetAtt 
      - PublicSubnet1
      - AvailabilityZone
  AZ2:
    Description: Availability Zone 2
    Value: !GetAtt 
      - PublicSubnet2
      - AvailabilityZone
  AZ3:
    Description: Availability Zone 3
    Value: !GetAtt 
      - PublicSubnet3
      - AvailabilityZone

  S3Bucket:
    Description: S3 Bucket
    Value: !Ref S3Bucket

